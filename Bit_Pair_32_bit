module Bit_Pair_32_bit(input signed [31:0] a, b, output [63:0] z);
//a = q
//b = m
//variables
integer i,j; 
reg [31:0] m;
reg [31:0] q; 

//{a[31], a} fills from a[31] to a

wire [31:0] compliment_b; 
assign compliment_b = ~b[31:0] + 1; 
reg [63:0] product = 32'b0;


    always @(a or b)
        for (i = 0; i<16; 2*i++)
            if(i = 0) q[i] = {a[1], a[0], a[0]}; else
                q[i] = {a[i+1], a[i], a[i-1]}; 
                //sign extention automatic? 
            case(q[i])
                3'b000: m[i] = 0;
                3'b001: m[i] = b; 
                3'b010: m[i] = b; 
                3'b011: m[i] = {b [30:0], 1b'0};  //shift left 1 bit 

                3'b100: m[i] = {compliment_b [30:0], 1'b0};
                3'b101: m[i] = compliment_b; 
                3'b110: m[i] = compliment_b; 
                3'b111: m[i] = 0; 
            endcase
            //adjust bit placement
            for (j = 0; j<i; 2*j++)
                m[j] = {m[j], 2'b00}; 

        end 
        for (i = 0; i<16; 2*i++)
            product = m[i] + product; 
    end
    assign z = product; 

endmodule
